# DS-Containers/docker-compose.yml
version: '3.8'

services:
  mlflow-db:
    image: postgres:13
    container_name: mlflow_postgres_db
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - mlflow_postgres_data:/var/lib/postgresql/data
    restart: always

  mlflow-server:
    build:
      context: . # Build context is the root DS-Containers directory
      dockerfile: Dockerfile.mlflow # Reference the specific Dockerfile
    container_name: mlflow_tracking_server
    ports:
      - '5000:5000'
    environment:
      MLFLOW_TRACKING_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-db:5432/${POSTGRES_DB}
      MLFLOW_ARTIFACT_URI: file:/mlflow_artifacts
    volumes:
      - mlflow_artifacts:/mlflow_artifacts # Persist artifacts
      - ./app:/app # Mount app code from host to container for execution
      - ./data:/data # Mount data directory from host to container for CSVs
    depends_on:
      - mlflow-db
    restart: always
    command: mlflow ui --host 0.0.0.0 --port 5000

  streamlit-ui:
    build:
      context: . # Build context is the root DS-Containers directory
      dockerfile: Dockerfile.streamlit # Reference the specific Dockerfile
    container_name: restaurant_streamlit_ui
    ports:
      - '8501:8501' # Streamlit UI port
    environment:
      MLFLOW_TRACKING_URI: http://mlflow-server:5000 # Streamlit connects to MLflow server
    volumes:
      - ./app:/app # Mount app code for Streamlit
      - ./data:/data # Mount data directory to read generated CSVs
      - mlflow_artifacts:/mlflow_artifacts # Access MLflow artifacts if needed
    depends_on:
      - mlflow-server
    restart: always

volumes:
  mlflow_postgres_data:
  mlflow_artifacts:
